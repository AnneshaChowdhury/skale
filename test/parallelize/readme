// -------------------------------------------------------------------------- //
- 1 stage 1 lineage :
	- de longueur 1 :
		- source -> action
		- source -> persist -> action
	- de longueur 2 :
		- source -> transfo -> action
		- source -> persist -> transfo -> action
		- source -> transfo -> persist -> action

// -------------------------------------------------------------------------- //
// nStage = 1, nPipelinePerStage = 1, pipeline length = 1
// -------------------------------------------------------------------------- //
[parallelize_0.js] parallelize -> count
[parallelize_1.js] parallelize -> collect
[parallelize_2.js] parallelize -> reduce
[parallelize_3.js] parallelize -> lookup
// -------------------------------------------------------------------------- //
// nStage = 1, nPipelinePerStage = 1, pipeline length = 1, persistence on source
// -------------------------------------------------------------------------- //
[parallelize_4.js] parallelize -> persist -> count
[parallelize_5.js] parallelize -> persist -> collect
[parallelize_6.js] parallelize -> persist -> reduce
[parallelize_7.js] parallelize -> persist -> lookup
// -------------------------------------------------------------------------- //
// nStage = 1, nPipelinePerStage = 1, pipeline length = 2
// -------------------------------------------------------------------------- //
[parallelize_8.js] parallelize -> map (no args) -> count
[parallelize_9.js] parallelize -> map (no args) -> collect
[parallelize_10.js] parallelize -> map (no args) -> reduce
[parallelize_11.js] parallelize -> map (no args) -> lookup
[parallelize_16.js] parallelize -> filter (no args) -> count
[parallelize_17.js] parallelize -> filter (no args) -> collect
[parallelize_18.js] parallelize -> filter (no args) -> reduce (no args)
[parallelize_19.js] parallelize -> filter (no args) -> lookup
[parallelize_24.js] parallelize -> flatMap (no args) -> count
[parallelize_25.js] parallelize -> flatMap (no args) -> collect
[parallelize_26.js] parallelize -> flatMap (no args) -> reduce (no args)
[parallelize_27.js] parallelize -> flatMap (no args) -> lookup
[parallelize_36.js] parallelize -> mapValues (no args) -> count
[parallelize_37.js] parallelize -> mapValues (no args) -> collect
[parallelize_38.js] parallelize -> mapValues (no args) -> reduce (no args)
[parallelize_39.js] parallelize -> mapValues (no args) -> lookup
// -------------------------------------------------------------------------- //
// nStage = 1, nPipelinePerStage = 1, pipeline length = 2, persistence on source
// -------------------------------------------------------------------------- //
[parallelize_12.js] parallelize -> persist -> map (no args) -> count
[parallelize_13.js] parallelize -> persist -> map (no args) -> collect
[parallelize_14.js] parallelize -> persist -> map (no args) -> reduce (no args) 
[parallelize_15.js] parallelize -> persist -> map (no args) -> lookup
[parallelize_20.js] parallelize -> persist -> filter (no args) -> count
[parallelize_21.js] parallelize -> persist -> filter (no args) -> collect
[parallelize_22.js] parallelize -> persist -> filter (no args) -> reduce (no args)
[parallelize_23.js] parallelize -> persist -> filter (no args) -> lookup
[parallelize_28.js] parallelize -> persist -> flatMap (no args) -> count
[parallelize_29.js] parallelize -> persist -> flatMap (no args) -> collect
[parallelize_30.js] parallelize -> persist -> flatMap (no args) -> reduce (no args)
[parallelize_31.js] parallelize -> persist -> flatMap (no args) -> lookup
[parallelize_52.js] parallelize -> persist -> mapValues (no args) -> count
[parallelize_53.js] parallelize -> persist -> mapValues (no args) -> collect
[parallelize_54.js] parallelize -> persist -> mapValues (no args) -> reduce (no args)
[parallelize_55.js] parallelize -> persist -> mapValues (no args) -> lookup
// -------------------------------------------------------------------------- //
// nStage = 1, nPipelinePerStage = 1, pipeline length = 2, persistence on transformation
// -------------------------------------------------------------------------- //
[parallelize_40.js] parallelize -> map (no args) -> persist -> count
[parallelize_41.js] parallelize -> map (no args) -> persist -> collect
[parallelize_42.js] parallelize -> map (no args) -> persist -> reduce (no args)
[parallelize_43.js] parallelize -> map (no args) -> persist -> lookup
[parallelize_44.js] parallelize -> filter (no args) -> persist -> count
[parallelize_45.js] parallelize -> filter (no args) -> persist -> collect
[parallelize_46.js] parallelize -> filter (no args) -> persist -> reduce (no args)
[parallelize_47.js] parallelize -> filter (no args) -> persist -> lookup
[parallelize_48.js] parallelize -> flatMap (no args) -> persist -> count
[parallelize_49.js] parallelize -> flatMap (no args) -> persist -> collect
[parallelize_50.js] parallelize -> flatMap (no args) -> persist -> reduce (no args)
[parallelize_51.js] parallelize -> flatMap (no args) -> persist -> lookup
[parallelize_56.js] parallelize -> mapValues (no args) -> persist -> count
[parallelize_57.js] parallelize -> mapValues (no args) -> persist -> collect
[parallelize_58.js] parallelize -> mapValues (no args) -> persist -> reduce (no args)
[parallelize_59.js] parallelize -> mapValues (no args) -> persist -> lookup
// -------------------------------------------------------------------------- //
// nStage = 2, nPipelinePerStage = 1, pipeline length = [2, 0]
// -------------------------------------------------------------------------- //
[parallelize_32.js] parallelize -> sample -> count
[parallelize_33.js] parallelize -> sample -> collect
[parallelize_34.js] parallelize -> sample -> reduce (no args)
[parallelize_35.js] parallelize -> sample -> lookup
[parallelize_60.js] parallelize -> groupByKey -> count
[parallelize_61.js] parallelize -> groupByKey -> collect
[parallelize_62.js] parallelize -> groupByKey -> reduce (no args)
[parallelize_63.js] parallelize -> groupByKey -> lookup
[parallelize_64.js] parallelize -> reduceByKey (no args) -> count
[parallelize_65.js] parallelize -> reduceByKey (no args) -> collect
[parallelize_66.js] parallelize -> reduceByKey (no args) -> reduce (no args)
[parallelize_67.js] parallelize -> reduceByKey (no args) -> lookup
[parallelize_68.js] parallelize -> persist -> sample -> count
[parallelize_69.js] parallelize -> persist -> sample -> collect
[parallelize_70.js] parallelize -> persist -> sample -> reduce (no args)
[parallelize_71.js] parallelize -> persist -> sample -> lookup
[parallelize_72.js] parallelize -> persist -> groupByKey -> count
[parallelize_73.js] parallelize -> persist -> groupByKey -> collect
[parallelize_74.js] parallelize -> persist -> groupByKey -> reduce (no args)
[parallelize_75.js] parallelize -> persist -> groupByKey -> lookup
[parallelize_76.js] parallelize -> persist -> reduceByKey (no args) -> count
[parallelize_77.js] parallelize -> persist -> reduceByKey (no args) -> collect
[parallelize_78.js] parallelize -> persist -> reduceByKey (no args) -> reduce (no args)
[parallelize_79.js] parallelize -> persist -> reduceByKey (no args) -> lookup

// DOING
[parallelize_80.js] parallelize -> sample -> persist -> count
[parallelize_81.js] parallelize -> sample -> persist -> collect
[parallelize_82.js] parallelize -> sample -> persist -> reduce (no args)
[parallelize_83.js] parallelize -> sample -> persist -> lookup

// TODO
[] parallelize -> groupByKey -> persist -> count
[] parallelize -> groupByKey -> persist -> collect
[] parallelize -> groupByKey -> persist -> reduce (no args)
[] parallelize -> groupByKey -> persist -> lookup

[] parallelize -> reduceByKey (no args) -> persist -> count
[] parallelize -> reduceByKey (no args) -> persist -> collect
[] parallelize -> reduceByKey (no args) -> persist -> reduce (no args)
[] parallelize -> reduceByKey (no args) -> persist -> lookup

// -------------------------------------------------------------------------- //
// 1 stage 2 lineages
// -------------------------------------------------------------------------- //
parallelize -> union -> count
parallelize ->

parallelize -> persist -> union -> count
parallelize ->

parallelize ->			-> union -> count
parallelize -> persist

parallelize -> persist -> union -> count
parallelize -> persist
