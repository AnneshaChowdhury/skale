// ========================================================================== //
- 1 stage 1 lineage :
	- de longueur 1 :
		- source -> action
		- source -> persist -> action
	- de longueur 2 :
		- source -> transfo -> action
		- source -> persist -> transfo -> action
		- source -> transfo -> persist -> action
// ========================================================================== //
// nStage = 1, nPipelinePerStage = 1, pipeline length = 1
// ========================================================================== //
[p000.js] parallelize -> count
[p001.js] parallelize -> collect
[p002.js] parallelize -> reduce
[p003.js] parallelize -> lookup
// ========================================================================== //
// nStage = 1, nPipelinePerStage = 1, pipeline length = 1, persistence on source
// ========================================================================== //
[p004.js] parallelize -> persist -> count
[p005.js] parallelize -> persist -> collect
[p006.js] parallelize -> persist -> reduce
[p007.js] parallelize -> persist -> lookup
// ========================================================================== //
// nStage = 1, nPipelinePerStage = 1, pipeline length = 2
// ========================================================================== //
[p008.js] parallelize -> map (no args) -> count
[p009.js] parallelize -> map (no args) -> collect
[p010.js] parallelize -> map (no args) -> reduce
[p011.js] parallelize -> map (no args) -> lookup
[p012.js] parallelize -> filter (no args) -> count
[p013.js] parallelize -> filter (no args) -> collect
[p014.js] parallelize -> filter (no args) -> reduce (no args)
[p015.js] parallelize -> filter (no args) -> lookup
[p016.js] parallelize -> flatMap (no args) -> count
[p017.js] parallelize -> flatMap (no args) -> collect
[p018.js] parallelize -> flatMap (no args) -> reduce (no args)
[p019.js] parallelize -> flatMap (no args) -> lookup
[p020.js] parallelize -> mapValues (no args) -> count
[p021.js] parallelize -> mapValues (no args) -> collect
[p022.js] parallelize -> mapValues (no args) -> reduce (no args)
[p023.js] parallelize -> mapValues (no args) -> lookup
// ========================================================================== //
// nStage = 1, nPipelinePerStage = 1, pipeline length = 2, persistence on source
// ========================================================================== //
[p024.js] parallelize -> persist -> map (no args) -> count
[p025.js] parallelize -> persist -> map (no args) -> collect
[p026.js] parallelize -> persist -> map (no args) -> reduce (no args) 
[p027.js] parallelize -> persist -> map (no args) -> lookup
[p028.js] parallelize -> persist -> filter (no args) -> count
[p029.js] parallelize -> persist -> filter (no args) -> collect
[p030.js] parallelize -> persist -> filter (no args) -> reduce (no args)
[p031.js] parallelize -> persist -> filter (no args) -> lookup
[p032.js] parallelize -> persist -> flatMap (no args) -> count
[p033.js] parallelize -> persist -> flatMap (no args) -> collect
[p034.js] parallelize -> persist -> flatMap (no args) -> reduce (no args)
[p035.js] parallelize -> persist -> flatMap (no args) -> lookup
[p036.js] parallelize -> persist -> mapValues (no args) -> count
[p037.js] parallelize -> persist -> mapValues (no args) -> collect
[p038.js] parallelize -> persist -> mapValues (no args) -> reduce (no args)
[p039.js] parallelize -> persist -> mapValues (no args) -> lookup
// ========================================================================== //
// nStage = 1, nPipelinePerStage = 1, pipeline length = 2, persistence on transformation
// ========================================================================== //

[p040.js] parallelize -> map (no args) -> persist -> count
[p041.js] parallelize -> map (no args) -> persist -> collect
[p042.js] parallelize -> map (no args) -> persist -> reduce (no args)
[p043.js] parallelize -> map (no args) -> persist -> lookup
[p044.js] parallelize -> filter (no args) -> persist -> count
[p045.js] parallelize -> filter (no args) -> persist -> collect
[p046.js] parallelize -> filter (no args) -> persist -> reduce (no args)
[p047.js] parallelize -> filter (no args) -> persist -> lookup
[p048.js] parallelize -> flatMap (no args) -> persist -> count
[p049.js] parallelize -> flatMap (no args) -> persist -> collect
[p050.js] parallelize -> flatMap (no args) -> persist -> reduce (no args)
[p051.js] parallelize -> flatMap (no args) -> persist -> lookup
[p052.js] parallelize -> mapValues (no args) -> persist -> count
[p053.js] parallelize -> mapValues (no args) -> persist -> collect
[p054.js] parallelize -> mapValues (no args) -> persist -> reduce (no args)
[p055.js] parallelize -> mapValues (no args) -> persist -> lookup
// ========================================================================== //
// nStage = 2, nPipelinePerStage = 1, pipeline length = [2, 0]
// ========================================================================== //
[p056.js] parallelize -> sample -> count
[p057.js] parallelize -> sample -> collect
[p058.js] parallelize -> sample -> reduce (no args)
[p059.js] parallelize -> sample -> lookup
[p060.js] parallelize -> groupByKey -> count				// FAIL
[p061.js] parallelize -> groupByKey -> collect				// FAIL
[p062.js] parallelize -> groupByKey -> reduce (no args)		// FAIL
[p063.js] parallelize -> groupByKey -> lookup				// FAIL
[p064.js] parallelize -> reduceByKey (no args) -> count
[p065.js] parallelize -> reduceByKey (no args) -> collect
[p066.js] parallelize -> reduceByKey (no args) -> reduce (no args)
[p067.js] parallelize -> reduceByKey (no args) -> lookup
[p068.js] parallelize -> persist -> sample -> count
[p069.js] parallelize -> persist -> sample -> collect
[p070.js] parallelize -> persist -> sample -> reduce (no args)
[p071.js] parallelize -> persist -> sample -> lookup
[p072.js] parallelize -> persist -> groupByKey -> count
[p073.js] parallelize -> persist -> groupByKey -> collect
[p074.js] parallelize -> persist -> groupByKey -> reduce (no args)
[p075.js] parallelize -> persist -> groupByKey -> lookup
[p076.js] parallelize -> persist -> reduceByKey (no args) -> count
[p077.js] parallelize -> persist -> reduceByKey (no args) -> collect
[p078.js] parallelize -> persist -> reduceByKey (no args) -> reduce (no args)
[p079.js] parallelize -> persist -> reduceByKey (no args) -> lookup
[p080.js] parallelize -> sample -> persist -> count
[p081.js] parallelize -> sample -> persist -> collect
[p082.js] parallelize -> sample -> persist -> reduce (no args)
[p083.js] parallelize -> sample -> persist -> lookup
[p084.js] parallelize -> groupByKey -> persist -> count
[p085.js] parallelize -> groupByKey -> persist -> collect
[p086.js] parallelize -> groupByKey -> persist -> reduce (no args)
[p087.js] parallelize -> groupByKey -> persist -> lookup
[p088.js] parallelize -> reduceByKey (no args) -> persist -> count
[p089.js] parallelize -> reduceByKey (no args) -> persist -> collect
[p090.js] parallelize -> reduceByKey (no args) -> persist -> reduce (no args)
[p091.js] parallelize -> reduceByKey (no args) -> persist -> lookup
// ========================================================================== //
// 1 stage 2 lineages
// ========================================================================== //
[p092.js] parallelize -> union -> collect
		  parallelize ->
[p093.js] parallelize -> persist -> union -> collect
		  parallelize ------------>
[p094.js] parallelize ------------> union -> collect
		  parallelize -> persist ->
[p095.js] parallelize -> persist -> union -> collect
		  parallelize -> persist
// ========================================================================== //
// 2 stage 2 lineages
// ========================================================================== //
[p096.js] parallelize -> join -> collect
		  parallelize ->
[p097.js] parallelize -> persist -> join -> collect
		  parallelize ------------>
[p098.js] parallelize ------------> join -> collect
		  parallelize -> persist ->
[p099.js] parallelize -> persist -> join -> collect
		  parallelize -> persist
[p100.js] parallelize -> coGroup -> collect
		  parallelize ->
[p101.js] parallelize -> persist -> coGroup -> collect
		  parallelize ------------>
[p102.js] parallelize ------------> coGroup -> collect
		  parallelize -> persist ->
[p103.js] parallelize -> persist -> coGroup -> collect
		  parallelize -> persist


// TODO Function to be implemented
[parallelize_104.js] parallelize -> crossProduct -> collect
					 parallelize ->
[parallelize_105.js] parallelize -> persist -> crossProduct -> collect
					 parallelize ------------>
[parallelize_106.js] parallelize ------------> crossProduct -> collect
					 parallelize -> persist ->
[parallelize_107.js] parallelize -> persist -> crossProduct -> collect
					 parallelize -> persist

[parallelize_108.js] parallelize -> sortByKey -> collect
					 parallelize ->
[parallelize_109.js] parallelize -> persist -> sortByKey -> collect
					 parallelize ------------>
[parallelize_110.js] parallelize ------------> sortByKey -> collect
					 parallelize -> persist ->
[parallelize_111.js] parallelize -> persist -> sortByKey -> collect
					 parallelize -> persist
