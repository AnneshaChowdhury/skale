#!/usr/local/bin/node --harmony

var child_process = require('child_process');
var co = require('co');
var thenify = require('thenify');
var Find = require('find');

var node = process.env.NODE || 'node';
var nodeOptions = process.env.NODE_OPTS || '--harmony';
var maxWorkers = process.argv[2] || process.env.UGRID_WORKER_PER_HOST || 1;
var files = [], nfail = 0, npass = 0;

var find = thenify(function (re, dir, callback) {
	Find.file(re, dir, function (res) {
		callback(null, res);
	});
});

var exec = thenify(function (cmd, opt, callback) {
	child_process.exec(cmd, opt, function (err, stdout, stderr) {
		callback(null, {error: err, stdout: stdout, stderr: stderr});
	});
});

var spawn = thenify(function (cmd, args, opt, callback) {
	var out, err, t, killed, p = child_process.spawn(cmd, args, opt);
	p.stdout.on('data', function (data) {
	 	out += data;
	});
	p.stderr.on('data', function (data) {
		err += data;
	});
	if (opt.timeout)
		t = setTimeout(function() {
			killed = 1;
			p.kill();
		}, opt.timeout);
	p.on('close', function (code) {
		if (t) clearTimeout(t);
		code = killed ? new Error("Timeout") : code;
		callback(null, {error: code, stdout: out, stderr: err});
	});
});

process.on('SIGINT', function () {
	console.log('interrupted');
	console.log('%d failed, %d passed, %d skipped', nfail, npass, maxWorkers * files.length - nfail - npass);
	if (process.env.UGRID_STOP)
		child_process.execSync(__dirname + '/../bin/stop-all.sh');
	process.exit(1);
});

co(function * () {
	var f, res;
	files = yield find(/\.js$/, '.');
	console.log(files.length + ' tests to run, 1 ' + (maxWorkers > 1 ? "to " + maxWorkers + " workers" : "worker") + ", Ctrl-C to interrupt");
	for (f in files) {
		for (var j = 1; j <= maxWorkers; j++) {
			process.stdout.write('\r' + j + ' worker' + (j == 1 ? ',  ' : 's, ') + files[f]);
			process.env.UGRID_WMAX = j;
			res = yield spawn(node, nodeOptions.split(' ').concat(files[f]), {env: process.env, timeout: 2000});
			if (res.error) {
				nfail++;
				console.log(' failed: ' + res.error);
			} else npass++;
		}
	}
	console.log('\r%d failed, %d passed, %d skipped\t\t\t\t\t', nfail, npass, maxWorkers * files.length - nfail - npass);

}).catch(function (err) {
	console.log(err.stack);
	process.exit(1);
});
